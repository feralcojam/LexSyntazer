
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 08 08:58:54 CST 2024
//----------------------------------------------------

package code;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 08 08:58:54 CST 2024
  */
public class Syntax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\024\000\002\003" +
    "\004\000\002\003\005\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\004\006\000\002\004\010\000\002\004\006\000\002\004" +
    "\010\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\005\015\000\002\005\011\000" +
    "\002\006\011\000\002\007\013\000\002\011\015\000\002" +
    "\012\006\000\002\012\005\000\002\013\004\000\002\013" +
    "\004\000\002\013\007\000\002\013\007\000\002\014\006" +
    "\000\002\014\006\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\037\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\046\010\001\002\000\004\032\011\001\002\000" +
    "\004\037\012\001\002\000\004\041\013\001\002\000\004" +
    "\042\014\001\002\000\004\044\015\001\002\000\004\030" +
    "\016\001\002\000\004\005\017\001\002\000\004\034\020" +
    "\001\002\000\004\035\021\001\002\000\004\043\022\001" +
    "\002\000\004\031\023\001\002\000\004\032\024\001\002" +
    "\000\016\005\030\006\026\007\032\011\025\012\027\013" +
    "\040\001\002\000\004\030\163\001\002\000\004\046\156" +
    "\001\002\000\004\030\121\001\002\000\004\046\114\001" +
    "\002\000\020\005\030\006\026\007\032\011\025\012\027" +
    "\013\040\033\ufffd\001\002\000\004\030\101\001\002\000" +
    "\020\005\030\006\026\007\032\011\025\012\027\013\040" +
    "\033\ufffb\001\002\000\004\033\076\001\002\000\020\005" +
    "\030\006\026\007\032\011\025\012\027\013\040\033\ufff9" +
    "\001\002\000\004\045\073\001\002\000\020\005\030\006" +
    "\026\007\032\011\025\012\027\013\040\033\ufff7\001\002" +
    "\000\004\032\041\001\002\000\016\005\030\006\026\007" +
    "\032\011\025\012\027\013\040\001\002\000\004\033\043" +
    "\001\002\000\004\011\044\001\002\000\004\030\045\001" +
    "\002\000\004\046\047\001\002\000\004\031\070\001\002" +
    "\000\014\014\050\015\051\016\052\017\054\020\053\001" +
    "\002\000\004\014\065\001\002\000\006\036\063\047\064" +
    "\001\002\000\006\036\061\047\062\001\002\000\006\036" +
    "\057\047\060\001\002\000\006\036\055\047\056\001\002" +
    "\000\006\031\uffde\045\uffde\001\002\000\006\031\uffda\045" +
    "\uffda\001\002\000\006\031\uffdd\045\uffdd\001\002\000\006" +
    "\031\uffd9\045\uffd9\001\002\000\006\031\uffdf\045\uffdf\001" +
    "\002\000\006\031\uffdb\045\uffdb\001\002\000\006\031\uffe0" +
    "\045\uffe0\001\002\000\006\031\uffdc\045\uffdc\001\002\000" +
    "\006\036\066\047\067\001\002\000\006\031\uffe2\045\uffe2" +
    "\001\002\000\006\031\uffe1\045\uffe1\001\002\000\004\045" +
    "\071\001\002\000\020\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\012\uffea\013\uffea\033\uffea\001\002\000\004\033\ufff6\001" +
    "\002\000\020\005\030\006\026\007\032\011\025\012\027" +
    "\013\040\033\uffff\001\002\000\004\033\ufffe\001\002\000" +
    "\004\033\ufff8\001\002\000\004\033\077\001\002\000\004" +
    "\002\000\001\002\000\004\033\ufffa\001\002\000\004\046" +
    "\047\001\002\000\004\031\103\001\002\000\004\032\104" +
    "\001\002\000\016\005\030\006\026\007\032\011\025\012" +
    "\027\013\040\001\002\000\004\033\106\001\002\000\022" +
    "\005\uffec\006\uffec\007\uffec\010\107\011\uffec\012\uffec\013" +
    "\uffec\033\uffec\001\002\000\004\032\110\001\002\000\016" +
    "\005\030\006\026\007\032\011\025\012\027\013\040\001" +
    "\002\000\004\033\112\001\002\000\020\005\uffed\006\uffed" +
    "\007\uffed\011\uffed\012\uffed\013\uffed\033\uffed\001\002\000" +
    "\004\033\ufffc\001\002\000\004\014\115\001\002\000\004" +
    "\036\116\001\002\000\006\004\117\045\ufff5\001\002\000" +
    "\006\005\030\006\026\001\002\000\004\045\ufff4\001\002" +
    "\000\006\006\123\046\124\001\002\000\004\045\132\001" +
    "\002\000\004\046\127\001\002\000\004\014\125\001\002" +
    "\000\004\047\126\001\002\000\004\045\uffe7\001\002\000" +
    "\004\014\130\001\002\000\004\047\131\001\002\000\004" +
    "\045\uffe8\001\002\000\004\046\047\001\002\000\004\045" +
    "\134\001\002\000\004\046\136\001\002\000\004\031\152" +
    "\001\002\000\010\014\137\021\140\022\141\001\002\000" +
    "\004\046\142\001\002\000\004\031\uffe6\001\002\000\004" +
    "\031\uffe5\001\002\000\012\023\146\024\147\025\145\026" +
    "\144\001\002\000\006\046\151\047\150\001\002\000\006" +
    "\046\uffee\047\uffee\001\002\000\006\046\uffef\047\uffef\001" +
    "\002\000\006\046\ufff1\047\ufff1\001\002\000\006\046\ufff0" +
    "\047\ufff0\001\002\000\004\031\uffe3\001\002\000\004\031" +
    "\uffe4\001\002\000\004\032\153\001\002\000\016\005\030" +
    "\006\026\007\032\011\025\012\027\013\040\001\002\000" +
    "\004\033\155\001\002\000\020\005\uffe9\006\uffe9\007\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\033\uffe9\001\002\000\004\014" +
    "\157\001\002\000\004\047\160\001\002\000\006\004\161" +
    "\045\ufff3\001\002\000\006\005\030\006\026\001\002\000" +
    "\004\045\ufff2\001\002\000\004\046\047\001\002\000\004" +
    "\031\165\001\002\000\004\032\166\001\002\000\016\005" +
    "\030\006\026\007\032\011\025\012\027\013\040\001\002" +
    "\000\004\033\170\001\002\000\020\005\uffeb\006\uffeb\007" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\033\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\033\004\035" +
    "\005\030\006\032\007\034\011\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\112\004\035\005\030\006\032\007\034\011" +
    "\036\001\001\000\002\001\001\000\016\003\077\004\035" +
    "\005\030\006\032\007\034\011\036\001\001\000\002\001" +
    "\001\000\016\003\074\004\035\005\030\006\032\007\034" +
    "\011\036\001\001\000\002\001\001\000\016\003\071\004" +
    "\035\005\030\006\032\007\034\011\036\001\001\000\002" +
    "\001\001\000\016\003\041\004\035\005\030\006\032\007" +
    "\034\011\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\073\004\035\005\030\006\032" +
    "\007\034\011\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\104\004\035\005\030\006\032\007\034" +
    "\011\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\110\004\035\005\030\006\032" +
    "\007\034\011\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\117\001\001\000\002\001" +
    "\001\000\004\012\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\132\001\001\000\002\001\001\000\004\013" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\153" +
    "\004\035\005\030\006\032\007\034\011\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\161\001\001\000" +
    "\002\001\001\000\004\014\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\166\004\035\005\030\006" +
    "\032\007\034\011\036\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDITIONAL ::= Identifier LessEqualThan Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDITIONAL ::= Identifier LessThan Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDITIONAL ::= Identifier GreaterEqualThan Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDITIONAL ::= Identifier GreaterThan Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDITIONAL ::= Identifier LessEqualThan StringLiteral 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDITIONAL ::= Identifier LessThan StringLiteral 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDITIONAL ::= Identifier GreaterEqualThan StringLiteral 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDITIONAL ::= Identifier GreaterThan StringLiteral 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDITIONAL ::= Identifier Equal Equal Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONDITIONAL ::= Identifier Equal Equal StringLiteral 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FOR_UPDATE ::= Identifier Equal Identifier OPERATOR Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FOR_UPDATE ::= Identifier Equal Identifier OPERATOR Identifier 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FOR_UPDATE ::= Identifier Decrement 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FOR_UPDATE ::= Identifier Increment 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_UPDATE",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FOR_INIT ::= Identifier Equal Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_INIT",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FOR_INIT ::= INT Identifier Equal Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FOR_INIT",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FORSTATEMENT ::= FOR OpenParenthesis FOR_INIT Semicolon CONDITIONAL Semicolon FOR_UPDATE CloseParenthesis OpenBrace SENTENCE CloseBrace 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("FORSTATEMENT",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DOSTATEMENT ::= DO OpenBrace SENTENCE CloseBrace WHILE OpenParenthesis CONDITIONAL CloseParenthesis Semicolon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DOSTATEMENT",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHILESTATEMENT ::= WHILE OpenParenthesis CONDITIONAL CloseParenthesis OpenBrace SENTENCE CloseBrace 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("WHILESTATEMENT",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFSTATEMENT ::= IF OpenParenthesis CONDITIONAL CloseParenthesis OpenBrace SENTENCE CloseBrace 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-6)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFSTATEMENT ::= IF OpenParenthesis CONDITIONAL CloseParenthesis OpenBrace SENTENCE CloseBrace ELSE OpenBrace SENTENCE CloseBrace 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("IFSTATEMENT",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERATOR ::= Division 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERATOR ::= Multiplication 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPERATOR ::= Subtract 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPERATOR ::= Add 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("OPERATOR",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARATION ::= INT Identifier Equal Number Comma DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARATION ::= INT Identifier Equal Number 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARATION ::= STRING Identifier Equal StringLiteral Comma DECLARATION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARATION ::= STRING Identifier Equal StringLiteral 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCE ::= FORSTATEMENT SENTENCE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCE ::= FORSTATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCE ::= DOSTATEMENT SENTENCE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE ::= DOSTATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCE ::= WHILESTATEMENT SENTENCE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCE ::= WHILESTATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCE ::= IFSTATEMENT SENTENCE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCE ::= IFSTATEMENT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCE ::= DECLARATION Semicolon SENTENCE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCE ::= DECLARATION Semicolon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("SENTENCE",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= Public Class Identifier OpenBrace Public Static Void Main OpenParenthesis STRING OpenBracket CloseBracket Args CloseParenthesis OpenBrace SENTENCE CloseBrace CloseBrace 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-17)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

